prg_comment = ""
prg_version = "0.7"
def program(prg, cmd):
    prg.add(0, "Initialize 0 TTL and Synchronize.sub")
    prg.add(0, "Set Marconi2", frequency=1771.626000, amplitude=-12.00, functions=dict(frequency=lambda x: cmd.get_var('uW2_freq')))
    prg.add(15800, "Initialize_Dipole_Lowpower", enable=False)
    prg.add(17000, "Initialize_Dipole_Off")
    prg.add(67000, "Switch Off MOT")
    prg.add(5077000, "Set_BrightMOT", enable=False)
    prg.add(5077000, "Set_MOT")
    prg.add(135077000, "Switch Off MOT", enable=False)
    prg.add(135077000, "Switch Off MOT_fast")
    prg.add(135078250, "GM_051018")
    prg.add(135080150, "DAC MT-MOT Current", 0.0000, functions=dict(value=lambda x: cmd.get_var('MT_I')))
    prg.add(135080650, "DAC MT-MOT Voltage", 0.0000, functions=dict(value=lambda x: cmd.get_var('MT_Voltage')))
    prg.add(135090000, "Oscilloscope Trigger ON", enable=False)
    prg.add(135133750, "wait")
    prg.add(135134750, "Config Field MT-MOT")
    prg.add(135135750, "DAC Horiz IR", 0.0000, functions=dict(value=lambda x: cmd.get_var('CigarV')))
    prg.add(135136250, "AOM IR Horizontal Amp", 1000)
    prg.add(135136750, "AOM IR Horizontal freq", 80.00)
    prg.add(135137250, "Oscilloscope Trigger ON", enable=False)
    prg.add(135637250, "DAC MT-MOT Voltage", 8.5000)
    prg.add(135638250, "Evaporation Ramp.sub", enable=False)
    prg.add(137138250, "MT Current Ramp", start_t=0, stop_x=0, n_points=100, start_x=24, stop_t=500, functions=dict(start_x=lambda x: cmd.get_var('MT_I'), stop_x=lambda x: cmd.get_var('MT_I_final')))
    prg.add(175638250, "MT Current Ramp", start_t=0, stop_x=18, n_points=100, start_x=0, stop_t=500, functions=dict(start_x=lambda x: cmd.get_var('MT_I_final')))
    prg.add(180739250, "Horizontal Dipole Evaporation Ramp_5V_2019_03")
    prg.add(213240250, "wait")
    prg.add(213250250, "Oscilloscope Trigger ON")
    prg.add(213260250, "IGBT BCompZfine CLOSE")
    prg.add(213261250, "DAC IR Horiz_Ellipt", 0.0000)
    prg.add(213262250, "DAC Vert IR", 0.0000)
    prg.add(213267250, "MT Current Ramp", start_t=0, stop_x=0, n_points=100, start_x=18, stop_t=200)
    prg.add(213268250, "AOM IR Horiz_Ellipt Amp", 1000)
    prg.add(213268750, "AOM IR Horiz_Ellipt freq", 110.00)
    prg.add(213268851, "DAC IR Horizontal Ellipt ramp", start_t=0, stop_x=5.5, n_points=100, start_x=0, stop_t=200)
    prg.add(213269351, "AOM IR Vertical Amp", 1000)
    prg.add(213269851, "AOM IR Vertical freq", 80.00)
    prg.add(213270351, "DAC IR Vertical ramp", start_t=0, stop_x=3, n_points=100, start_x=0, stop_t=200)
    prg.add(215271351, "Config field OFF")
    prg.add(215276351, "DAC IR Horizontal ramp", start_t=0, stop_x=-0.01, n_points=100, start_x=0.04, stop_t=400)
    prg.add(219277351, "AOM IR Horizontal Amp", 0)
    prg.add(219277851, "AOM IR Horizontal freq", 120.00)
    prg.add(219277851, "DAC MT-MOT Current", 40.0000, enable=False)
    prg.add(220277851, "Config field Levit", functions=dict(time=lambda x: x+cmd.get_var('hold_time')), enable=False)
    prg.add(220278851, "Switch Off Dipole", functions=dict(time=lambda x: x+cmd.get_var('hold_time')))
    prg.add(220278891, "Oscilloscope Trigger OFF", functions=dict(time=lambda x: x+cmd.get_var('hold_time')))
    prg.add(220281141, "Picture_Mirror_Na_VarProbeDet", functions=dict(time=lambda x: x + cmd.get_var('tof')), enable=False)
    prg.add(220281141, "Picture_Mirror_Na_uWRepump", functions=dict(time=lambda x: x + cmd.get_var('tof') + cmd.get_var('hold_time')))
    prg.add(220281141, "Picture_Mirror_Levit_VarProbeDet", functions=dict(time=lambda x: x+cmd.get_var('tof')), enable=False)
    prg.add(240286000, "IGBT BCompZfine OPEN")
    prg.add(245561141, "Set_MOT", functions=dict(time=lambda x: x +cmd.get_var('tof')))
    prg.add(245562141, "AOM IR Horizontal Amp", 1000)
    prg.add(245562141, "Set_BrightMOT", enable=False)
    return prg
def commands(cmd):
    import numpy as np
    iters = np.arange(0, 1500, 100)
    np.random.shuffle(iters)
    j = 0
    while(cmd.running):
        print('\n-------o-------')
        hold_time1 = iters[j]
        cmd.set_var('hold_time', hold_time1)
        print('\n')
        print('Run #%d/%d, with variables:\nhold_time = %g\n'%(j+1, len(iters), hold_time1))
        cmd.run(wait_end=True, add_time=10000)
        j += 1
        if j == len(iters):
            cmd.stop()
    return cmd
