prg_comment = ""
prg_version = "0.7"
def program(prg, cmd):
    prg.add(0, "Initialize 0 TTL and Synchronize.sub")
    prg.add(15800, "Initialize_Dipole_Lowpower", enable=False)
    prg.add(17000, "Initialize_Dipole_Off")
    prg.add(67000, "Switch Off MOT")
    prg.add(77000, "[test] Degauss_1012")
    prg.add(12077000, "Set_BrightMOT", enable=False)
    prg.add(12077000, "Set_MOT")
    prg.add(142077000, "Switch Off MOT", enable=False)
    prg.add(142077000, "Switch Off MOT_fast")
    prg.add(142078250, "GM_051018")
    prg.add(142080150, "DAC MT-MOT Current", 0.0000, functions=dict(value=lambda x: cmd.get_var('MT_I')))
    prg.add(142080650, "DAC MT-MOT Voltage", 0.0000, functions=dict(value=lambda x: cmd.get_var('MT_Voltage')))
    prg.add(142090000, "Oscilloscope Trigger ON", enable=False)
    prg.add(142133750, "wait")
    prg.add(142134750, "Config Field MT-MOT")
    prg.add(142135750, "DAC Horiz IR", 0.0000, functions=dict(value=lambda x: cmd.get_var('CigarV')))
    prg.add(142136250, "AOM IR Horizontal Amp", 1000)
    prg.add(142136750, "AOM IR Horizontal freq", 80.00)
    prg.add(142137250, "Oscilloscope Trigger ON", enable=False)
    prg.add(142637250, "DAC MT-MOT Voltage", 8.5000)
    prg.add(142638250, "Evaporation Ramp.sub", enable=False)
    prg.add(144138250, "MT Current Ramp", start_t=0, stop_x=0, n_points=100, start_x=24, stop_t=500, functions=dict(start_x=lambda x: cmd.get_var('MT_I'), stop_x=lambda x: cmd.get_var('MT_I_final')))
    prg.add(182638250, "MT Current Ramp", start_t=0, stop_x=18, n_points=100, start_x=0, stop_t=500, functions=dict(start_x=lambda x: cmd.get_var('MT_I_final')))
    prg.add(187739250, "Horizontal Dipole Evaporation Ramp_5V_2019_03")
    prg.add(187740250, "DAC PiezoHorizEllipt", 0.0000, functions=dict(value=lambda x: cmd.get_var('PiezoElliptV')))
    prg.add(220241250, "wait")
    prg.add(220251250, "Oscilloscope Trigger ON")
    prg.add(220252250, "CigarToPancakeTransfer_190523")
    prg.add(231802250, "wait", enable=False)
    prg.add(231812250, "DAC IR Horiz_Ellipt Exp ramp", start_t=0.0000, func_args="start_value=4.8, tau=0.4, offset=0.6", n_points=1000, func="(start_value-offset)*exp(-t/tau)+offset", stop_t=1800.0000)
    prg.add(249813250, "wait")
    prg.add(249814250, "+-1_mixture_preparation", enable=False)
    prg.add(250914250, "Phase-Imprint", enable=False)
    prg.add(251014250, "deloading", enable=False)
    prg.add(251015250, "two_photon_pulse")
    prg.add(251016250, "TTL uW 2 OFF", enable=False)
    prg.add(251016260, "TTL uW 1 (100W) OFF", enable=False)
    prg.add(251017260, "DAC IR Horiz_Ellipt Exp ramp", start_t=-1800.0000, func_args="start_value=5, tau=-0.4, offset=0.35", n_points=1000, func="(start_value-offset)*(exp(-t/tau))+offset", stop_t=0.0000, enable=False)
    prg.add(251018260, "DAC MT-MOT Current", 40.0000, functions=dict(time=lambda x: x+cmd.get_var('hold_time')))
    prg.add(251019260, "Config field Levit", functions=dict(time=lambda x: x+cmd.get_var('hold_time')))
    prg.add(251019260, "Config field OFF", functions=dict(time=lambda x: x+cmd.get_var('hold_time')), enable=False)
    prg.add(251020239, "Oscilloscope Trigger OFF", functions=dict(time=lambda x: x+cmd.get_var('hold_time')))
    prg.add(251020260, "Switch Off Dipole", functions=dict(time=lambda x: x+cmd.get_var('hold_time')))
    prg.add(251021500, "Picture_Mirror_Na_VarProbeDet", functions=dict(time=lambda x: x + cmd.get_var('tof')+cmd.get_var('hold_time')), enable=False)
    prg.add(251021500, "Picture_Mirror_Na_uWRepump", functions=dict(time=lambda x: x + cmd.get_var('tof') + cmd.get_var('hold_time')), enable=False)
    prg.add(251021500, "Picture_Mirror_Levit_VarProbeDet", functions=dict(time=lambda x: x+cmd.get_var('tof')+cmd.get_var('hold_time')))
    prg.add(266021500, "Set_MOT", functions=dict(time=lambda x: x +cmd.get_var('tof') + cmd.get_var('hold_time')))
    prg.add(266022500, "AOM IR Horizontal Amp", 1000)
    prg.add(266022500, "Set_BrightMOT", enable=False)
    return prg
def commands(cmd):
    import numpy as np
    iters = np.arange(811.000000, 812.100000, 0.100000)
    np.random.shuffle(iters)
    j = 0
    while(cmd.running):
        print('\n-------o-------')
        uW_freq21 = iters[j]
        cmd.set_var('uW_freq2', uW_freq21)
        print('\n')
        print('Run #%d/%d, with variables:\nuW_freq2 = %g\n'%(j+1, len(iters), uW_freq21))
        cmd.run(wait_end=True, add_time=100)
        j += 1
        if j == len(iters):
            cmd.stop()
    return cmd
